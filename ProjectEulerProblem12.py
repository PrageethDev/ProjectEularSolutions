__author__ = 'prageeth'

# This generates triangle numbers
        # (numIncSta => numberIncrementStarter, triNum => triangleNumber)
def triangleNumGenerator():
    numIncSta = 1
    triNum = 0
    while 1:
        triNum += numIncSta
        numIncSta += 1
        yield triNum

# This will list the triangle numbers generated by the Triangle
        # tesNum => testingNumber, triNumRet => triangularNumberRetriever, lisTriNum => listedTriangularNumber)
def listingTriNums(tesNum):
    triNumRet = triangleNumGenerator()
    lisTriNum = 0
    for i in range(tesNum):
        lisTriNum = triNumRet.next()
    return lisTriNum



def divisorGenerator(gotTriNum):
    divisors = []
    # search from 1..sqrt(n)
    for divisor in xrange(1, int(gotTriNum**0.5) + 1):
        if gotTriNum % divisor is 0:
            yield divisor
            if divisor is not gotTriNum / divisor:
                divisors.insert(0, gotTriNum / divisor)
    for div in divisors:
        yield div


def divisors(gotTriNum):
    return [divisor for divisor in divisorGenerator(gotTriNum)]

# The main
    # (numOfDiv => numberOfDevisors, tesIncNo => testIncrementNo)
if __name__ == '__main__':
    numOfDiv = 0
    tesIncNo = 1
    while numOfDiv < 500:
        tesIncNo += 1
        getTriNum = listingTriNums(tesIncNo)
        print getTriNum
        divs = divisors(getTriNum)
        numOfDiv = len(divs)

    print "The first triangular number which has 500 divisors is ", getTriNum # 76576500